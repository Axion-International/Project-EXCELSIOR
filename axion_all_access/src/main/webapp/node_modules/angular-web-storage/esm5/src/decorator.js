import { StorageUtil, isBrowser } from './util';
var cache = {};
function WebStorage(storage, key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 'd'; }
    return function (target, propertyName) {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: function () {
                return StorageUtil.get(storage, key);
            },
            set: function (value) {
                if (!cache[key]) {
                    var storedValue = StorageUtil.get(storage, key);
                    if (storedValue === null) {
                        StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
                    }
                    cache[key] = true;
                    return;
                }
                StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * `localStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function LocalStorage(key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 't'; }
    return WebStorage(isBrowser ? localStorage : null, key, expiredAt, expiredUnit);
}
/**
 * `sessionStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function SessionStorage(key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 't'; }
    return WebStorage(isBrowser ? sessionStorage : null, key, expiredAt, expiredUnit);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci13ZWItc3RvcmFnZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFLN0QsSUFBTSxLQUFLLEdBQVcsRUFBRSxDQUFDO0FBRXpCLFNBQVMsVUFBVSxDQUNqQixPQUFnQixFQUNoQixHQUFXLEVBQ1gsU0FBcUIsRUFDckIsV0FBOEI7SUFEOUIsMEJBQUEsRUFBQSxhQUFxQjtJQUNyQiw0QkFBQSxFQUFBLGlCQUE4QjtJQUU5QixPQUFPLFVBQUMsTUFBYyxFQUFFLFlBQW9CO1FBQzFDLEdBQUcsR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRTtZQUMxQyxHQUFHLEVBQUU7Z0JBQ0gsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBVSxHQUFHLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBQ0QsR0FBRyxFQUFFLFVBQUMsS0FBVTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFTLEdBQUcsQ0FBQyxFQUFFO29CQUN2QixJQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBVSxHQUFHLENBQUMsQ0FBQztvQkFDMUQsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO3dCQUN4QixXQUFXLENBQUMsR0FBRyxDQUNiLE9BQU8sRUFDQyxHQUFHLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFDVCxXQUFXLENBQ1osQ0FBQztxQkFDSDtvQkFDRCxLQUFLLENBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUMxQixPQUFPO2lCQUNSO2dCQUNELFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZFLENBQUM7WUFDRCxVQUFVLEVBQUUsSUFBSTtZQUNoQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUMxQixHQUFZLEVBQ1osU0FBcUIsRUFDckIsV0FBOEI7SUFEOUIsMEJBQUEsRUFBQSxhQUFxQjtJQUNyQiw0QkFBQSxFQUFBLGlCQUE4QjtJQUU5QixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEYsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsR0FBWSxFQUNaLFNBQXFCLEVBQ3JCLFdBQThCO0lBRDlCLDBCQUFBLEVBQUEsYUFBcUI7SUFDckIsNEJBQUEsRUFBQSxpQkFBOEI7SUFFOUIsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3BGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHBpcmVkVW5pdCwgU3RvcmFnZVV0aWwsIGlzQnJvd3NlciB9IGZyb20gJy4vdXRpbCc7XG5cbmludGVyZmFjZSBJQ2FjaGUge1xuICBba2V5OiBzdHJpbmddOiBib29sZWFuO1xufVxuY29uc3QgY2FjaGU6IElDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBXZWJTdG9yYWdlKFxuICBzdG9yYWdlOiBTdG9yYWdlLFxuICBrZXk6IHN0cmluZyxcbiAgZXhwaXJlZEF0OiBudW1iZXIgPSAwLFxuICBleHBpcmVkVW5pdDogRXhwaXJlZFVuaXQgPSAnZCcsXG4pIHtcbiAgcmV0dXJuICh0YXJnZXQ6IE9iamVjdCwgcHJvcGVydHlOYW1lOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICBrZXkgPSBrZXkgfHwgcHJvcGVydHlOYW1lO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5TmFtZSwge1xuICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBTdG9yYWdlVXRpbC5nZXQoc3RvcmFnZSwgPHN0cmluZz5rZXkpO1xuICAgICAgfSxcbiAgICAgIHNldDogKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKCFjYWNoZVs8c3RyaW5nPmtleV0pIHtcbiAgICAgICAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IFN0b3JhZ2VVdGlsLmdldChzdG9yYWdlLCA8c3RyaW5nPmtleSk7XG4gICAgICAgICAgaWYgKHN0b3JlZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBTdG9yYWdlVXRpbC5zZXQoXG4gICAgICAgICAgICAgIHN0b3JhZ2UsXG4gICAgICAgICAgICAgIDxzdHJpbmc+a2V5LFxuICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgZXhwaXJlZEF0LFxuICAgICAgICAgICAgICBleHBpcmVkVW5pdCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhY2hlWzxzdHJpbmc+a2V5XSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFN0b3JhZ2VVdGlsLnNldChzdG9yYWdlLCA8c3RyaW5nPmtleSwgdmFsdWUsIGV4cGlyZWRBdCwgZXhwaXJlZFVuaXQpO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogYGxvY2FsU3RvcmFnZWAgRGVjb3JhdG9yXG4gKlxuICogQHBhcmFtIFtleHBpcmVkQXQ9MF0gRXhwaXJhdGlvbiB0aW1lLCAwIG1lYW5zIGZvcmV2ZXJcbiAqIEBwYXJhbSBbZXhwaXJlZFVuaXQ9J3QnXSBFeHBpcmF0aW9uIHRpbWUgdW5pdCAoZGVmYXVsdDogY3VzdG9tIFt1bml0OiBtc10pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBMb2NhbFN0b3JhZ2UoXG4gIGtleT86IHN0cmluZyxcbiAgZXhwaXJlZEF0OiBudW1iZXIgPSAwLFxuICBleHBpcmVkVW5pdDogRXhwaXJlZFVuaXQgPSAndCcsXG4pIHtcbiAgcmV0dXJuIFdlYlN0b3JhZ2UoaXNCcm93c2VyID8gbG9jYWxTdG9yYWdlIDogbnVsbCwga2V5LCBleHBpcmVkQXQsIGV4cGlyZWRVbml0KTtcbn1cblxuLyoqXG4gKiBgc2Vzc2lvblN0b3JhZ2VgIERlY29yYXRvclxuICpcbiAqIEBwYXJhbSBbZXhwaXJlZEF0PTBdIEV4cGlyYXRpb24gdGltZSwgMCBtZWFucyBmb3JldmVyXG4gKiBAcGFyYW0gW2V4cGlyZWRVbml0PSd0J10gRXhwaXJhdGlvbiB0aW1lIHVuaXQgKGRlZmF1bHQ6IGN1c3RvbSBbdW5pdDogbXNdKVxuICovXG5leHBvcnQgZnVuY3Rpb24gU2Vzc2lvblN0b3JhZ2UoXG4gIGtleT86IHN0cmluZyxcbiAgZXhwaXJlZEF0OiBudW1iZXIgPSAwLFxuICBleHBpcmVkVW5pdDogRXhwaXJlZFVuaXQgPSAndCcsXG4pIHtcbiAgcmV0dXJuIFdlYlN0b3JhZ2UoaXNCcm93c2VyID8gc2Vzc2lvblN0b3JhZ2UgOiBudWxsLCBrZXksIGV4cGlyZWRBdCwgZXhwaXJlZFVuaXQpO1xufVxuIl19