import { StorageUtil, isBrowser } from './util';
const cache = {};
function WebStorage(storage, key, expiredAt = 0, expiredUnit = 'd') {
    return (target, propertyName) => {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: () => {
                return StorageUtil.get(storage, key);
            },
            set: (value) => {
                if (!cache[key]) {
                    const storedValue = StorageUtil.get(storage, key);
                    if (storedValue === null) {
                        StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
                    }
                    cache[key] = true;
                    return;
                }
                StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * `localStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function LocalStorage(key, expiredAt = 0, expiredUnit = 't') {
    return WebStorage(isBrowser ? localStorage : null, key, expiredAt, expiredUnit);
}
/**
 * `sessionStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function SessionStorage(key, expiredAt = 0, expiredUnit = 't') {
    return WebStorage(isBrowser ? sessionStorage : null, key, expiredAt, expiredUnit);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci13ZWItc3RvcmFnZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFLN0QsTUFBTSxLQUFLLEdBQVcsRUFBRSxDQUFDO0FBRXpCLFNBQVMsVUFBVSxDQUNqQixPQUFnQixFQUNoQixHQUFXLEVBQ1gsWUFBb0IsQ0FBQyxFQUNyQixjQUEyQixHQUFHO0lBRTlCLE9BQU8sQ0FBQyxNQUFjLEVBQUUsWUFBb0IsRUFBUSxFQUFFO1FBQ3BELEdBQUcsR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRTtZQUMxQyxHQUFHLEVBQUUsR0FBRyxFQUFFO2dCQUNSLE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQVUsR0FBRyxDQUFDLENBQUM7WUFDL0MsQ0FBQztZQUNELEdBQUcsRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUNsQixJQUFJLENBQUMsS0FBSyxDQUFTLEdBQUcsQ0FBQyxFQUFFO29CQUN2QixNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBVSxHQUFHLENBQUMsQ0FBQztvQkFDMUQsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO3dCQUN4QixXQUFXLENBQUMsR0FBRyxDQUNiLE9BQU8sRUFDQyxHQUFHLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFDVCxXQUFXLENBQ1osQ0FBQztxQkFDSDtvQkFDRCxLQUFLLENBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUMxQixPQUFPO2lCQUNSO2dCQUNELFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZFLENBQUM7WUFDRCxVQUFVLEVBQUUsSUFBSTtZQUNoQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUMxQixHQUFZLEVBQ1osWUFBb0IsQ0FBQyxFQUNyQixjQUEyQixHQUFHO0lBRTlCLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUM1QixHQUFZLEVBQ1osWUFBb0IsQ0FBQyxFQUNyQixjQUEyQixHQUFHO0lBRTlCLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNwRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwaXJlZFVuaXQsIFN0b3JhZ2VVdGlsLCBpc0Jyb3dzZXIgfSBmcm9tICcuL3V0aWwnO1xuXG5pbnRlcmZhY2UgSUNhY2hlIHtcbiAgW2tleTogc3RyaW5nXTogYm9vbGVhbjtcbn1cbmNvbnN0IGNhY2hlOiBJQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gV2ViU3RvcmFnZShcbiAgc3RvcmFnZTogU3RvcmFnZSxcbiAga2V5OiBzdHJpbmcsXG4gIGV4cGlyZWRBdDogbnVtYmVyID0gMCxcbiAgZXhwaXJlZFVuaXQ6IEV4cGlyZWRVbml0ID0gJ2QnLFxuKSB7XG4gIHJldHVybiAodGFyZ2V0OiBPYmplY3QsIHByb3BlcnR5TmFtZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAga2V5ID0ga2V5IHx8IHByb3BlcnR5TmFtZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIHtcbiAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gU3RvcmFnZVV0aWwuZ2V0KHN0b3JhZ2UsIDxzdHJpbmc+a2V5KTtcbiAgICAgIH0sXG4gICAgICBzZXQ6ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGlmICghY2FjaGVbPHN0cmluZz5rZXldKSB7XG4gICAgICAgICAgY29uc3Qgc3RvcmVkVmFsdWUgPSBTdG9yYWdlVXRpbC5nZXQoc3RvcmFnZSwgPHN0cmluZz5rZXkpO1xuICAgICAgICAgIGlmIChzdG9yZWRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgU3RvcmFnZVV0aWwuc2V0KFxuICAgICAgICAgICAgICBzdG9yYWdlLFxuICAgICAgICAgICAgICA8c3RyaW5nPmtleSxcbiAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgIGV4cGlyZWRBdCxcbiAgICAgICAgICAgICAgZXhwaXJlZFVuaXQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWNoZVs8c3RyaW5nPmtleV0gPSB0cnVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBTdG9yYWdlVXRpbC5zZXQoc3RvcmFnZSwgPHN0cmluZz5rZXksIHZhbHVlLCBleHBpcmVkQXQsIGV4cGlyZWRVbml0KTtcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIGBsb2NhbFN0b3JhZ2VgIERlY29yYXRvclxuICpcbiAqIEBwYXJhbSBbZXhwaXJlZEF0PTBdIEV4cGlyYXRpb24gdGltZSwgMCBtZWFucyBmb3JldmVyXG4gKiBAcGFyYW0gW2V4cGlyZWRVbml0PSd0J10gRXhwaXJhdGlvbiB0aW1lIHVuaXQgKGRlZmF1bHQ6IGN1c3RvbSBbdW5pdDogbXNdKVxuICovXG5leHBvcnQgZnVuY3Rpb24gTG9jYWxTdG9yYWdlKFxuICBrZXk/OiBzdHJpbmcsXG4gIGV4cGlyZWRBdDogbnVtYmVyID0gMCxcbiAgZXhwaXJlZFVuaXQ6IEV4cGlyZWRVbml0ID0gJ3QnLFxuKSB7XG4gIHJldHVybiBXZWJTdG9yYWdlKGlzQnJvd3NlciA/IGxvY2FsU3RvcmFnZSA6IG51bGwsIGtleSwgZXhwaXJlZEF0LCBleHBpcmVkVW5pdCk7XG59XG5cbi8qKlxuICogYHNlc3Npb25TdG9yYWdlYCBEZWNvcmF0b3JcbiAqXG4gKiBAcGFyYW0gW2V4cGlyZWRBdD0wXSBFeHBpcmF0aW9uIHRpbWUsIDAgbWVhbnMgZm9yZXZlclxuICogQHBhcmFtIFtleHBpcmVkVW5pdD0ndCddIEV4cGlyYXRpb24gdGltZSB1bml0IChkZWZhdWx0OiBjdXN0b20gW3VuaXQ6IG1zXSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNlc3Npb25TdG9yYWdlKFxuICBrZXk/OiBzdHJpbmcsXG4gIGV4cGlyZWRBdDogbnVtYmVyID0gMCxcbiAgZXhwaXJlZFVuaXQ6IEV4cGlyZWRVbml0ID0gJ3QnLFxuKSB7XG4gIHJldHVybiBXZWJTdG9yYWdlKGlzQnJvd3NlciA/IHNlc3Npb25TdG9yYWdlIDogbnVsbCwga2V5LCBleHBpcmVkQXQsIGV4cGlyZWRVbml0KTtcbn1cbiJdfQ==